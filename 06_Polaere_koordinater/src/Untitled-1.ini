# Tutorial 1: Introduktion til Polære Koordinatsystemer

## Introduktion
Polære koordinatsystemer er en alternativ metode til at beskrive positioner i rum, som adskiller sig fra det kartesiske koordinatsystem. Denne tutorial introducerer grundlæggende koncepter bag polære koordinater, hvordan de fungerer i 2D, og hvorfor de er nyttige i forskellige sammenhænge.

## Hvad er et polært koordinatsystem?
Et polært koordinatsystem består af:
- Et **nulpunkt** (også kaldet polen), som definerer systemets centrum
- En **polær akse**, som er en stråle fra nulpunktet (typisk peger denne mod højre)

I modsætning til det kartesiske system, hvor vi bruger to afstande (x,y), beskriver vi i det polære system en position med:
- En **afstand** (r) fra nulpunktet
- En **vinkel** (θ) målt fra den polære akse

## Sådan aflæser du polære koordinater (r,θ)
For at lokalisere et punkt med polære koordinater (r,θ):

1. Start ved nulpunktet og peg i retning af den polære akse
2. Rotér med vinklen θ (positiv vinkel er mod uret, negativ er med uret)
3. Bevæg dig en afstand r i den retning, du nu peger
4. Nu er du ved punktet beskrevet af (r,θ)

## Gitterlinjer i polære koordinater
I et polært koordinatsystem består gitterlinjerne af:
- **Cirkler** med centrum i nulpunktet, som repræsenterer punkter med samme r-værdi
- **Rette linjer** gennem nulpunktet, som repræsenterer punkter med samme θ-værdi

Dette skaber et meget anderledes "grid" end de rette linjer i et kartesisk system.

## Aliasering: Flere koordinatsæt for samme punkt
En vigtig egenskab ved polære koordinater er, at et punkt kan beskrives med uendeligt mange forskellige koordinatsæt. Dette kaldes aliasering. For eksempel:

- Ved at tilføje 360° til θ (eller et multiplum heraf)
- Ved at negere r og tilføje 180° til θ
- Ved nulpunktet (r=0) er θ-værdien ligegyldig

Dette kan virke forvirrende, men der findes kanoniske former for polære koordinater, hvor:
- r ≥ 0
- -180° < θ ≤ 180°
- Ved r=0 sætter vi θ=0

## Konvertering mellem polære og kartesiske koordinater
### Fra polære til kartesiske koordinater:
- x = r cos(θ)
- y = r sin(θ)

### Fra kartesiske til polære koordinater:
- r = √(x² + y²)
- θ = atan2(y,x)

## Afslutning
Polære koordinater er intuitive til mange formål, især når retning og afstand er naturlige måder at tænke på. I hverdagssprog bruger vi ofte polære koordinater uden at tænke over det, når vi f.eks. siger "20 km nordøst for København". I næste tutorial vil vi se på mere avancerede anvendelser og 3D-polære koordinatsystemer.

# Tutorial 2: Anvendelser af Polære Koordinater i Praksis og Programmering

## Introduktion
Polære koordinater har mange praktiske anvendelsesmuligheder, der gør dem overlegne i forhold til kartesiske koordinater i bestemte situationer. I denne tutorial udforsker vi, hvornår polære koordinater er særligt nyttige, og hvordan de kan implementeres i programmering.

## Hvornår er polære koordinater fordelagtige?
Polære koordinater er især nyttige, når:

1. **Naturlig kommunikation**: Mennesker tænker intuitivt i retning og afstand
   - Eksempel: "15 km sydøst for Aarhus" er mere naturligt end "x=10,6 km, y=-10,6 km"

2. **Sigte- og retningssystemer**: Når man skal pege eller rette noget mod et mål
   - Eksempel: Kameraer, våbensystemer eller radarudstyr

3. **Roterende bevægelser**: Når objekter følger cirkulære baner
   - Eksempel: Planeter i kredsløb eller roterende mekanismer

4. **Dataindsamlingssystemer**: Fysiske sensorer der måler afstand og retning
   - Eksempel: Sonar, radar og lasermålingssystemer

## Implementering af polære koordinater i programmering

### Konvertering til kanonisk form
Her er et eksempel på, hvordan du kan konvertere polære koordinater til kanonisk form i Python:

```python
import math

def til_kanonisk_form(r, theta):
    """Konverterer polære koordinater til kanonisk form."""
    
    # Hvis vi er ved nulpunktet
    if r == 0:
        return 0, 0
    
    # Håndter negative afstande
    if r < 0:
        r = -r
        theta += math.pi  # 180 grader
    
    # Wrap theta til intervallet (-pi, pi]
    theta = (theta + math.pi) % (2 * math.pi) - math.pi
    
    return r, theta
```

### Konvertering mellem polære og kartesiske koordinater

```python
def polar_til_kartesisk(r, theta):
    """Konverterer polære koordinater til kartesiske."""
    x = r * math.cos(theta)
    y = r * math.sin(theta)
    return x, y

def kartesisk_til_polar(x, y):
    """Konverterer kartesiske koordinater til polære."""
    r = math.sqrt(x*x + y*y)
    theta = math.atan2(y, x)
    return r, theta
```

## Praktisk anvendelse: Kamerastyring i spil
I 3D-spil bruges ofte polære koordinater til at styre et kamera omkring en spiller. Denne teknik giver en mere intuitiv kontrol:

```python
class KameraStyring:
    def __init__(self):
        self.afstand = 5.0  # r-koordinat (afstand fra spilleren)
        self.horisontal_vinkel = 0.0  # θ-koordinat (vinklen omkring spilleren)
        self.vertikal_vinkel = 0.0  # φ-koordinat i sfæriske koordinater
    
    def opdater_kamera_position(self, spiller_position):
        # Konverter sfæriske koordinater til kartesiske offset
        x = self.afstand * math.cos(self.vertikal_vinkel) * math.sin(self.horisontal_vinkel)
        y = -self.afstand * math.sin(self.vertikal_vinkel)
        z = self.afstand * math.cos(self.vertikal_vinkel) * math.cos(self.horisontal_vinkel)
        
        # Placér kameraet relativt til spilleren
        kamera_position = [
            spiller_position[0] + x,
            spiller_position[1] + y,
            spiller_position[2] + z
        ]
        
        return kamera_position
```

## Optimering af beregninger
Når du arbejder med polære koordinater, er det ofte en god idé at overveje disse optimeringstips:

1. Undgå unødvendige konverteringer mellem polære og kartesiske koordinater
2. Brug biblioteksfunktioner som `atan2()` i stedet for selv at implementere dem
3. Vær opmærksom på præcisionstab ved flydende kommatal
4. Håndter edge cases korrekt (f.eks. ved nulpunktet eller ved polerne)

## Afslutning
Polære koordinater er et kraftfuldt værktøj i programmørens værktøjskasse, især i applikationer, der involverer retning, rotation eller afstandsmålinger. Ved at forstå hvornår og hvordan man bruger polære koordinater, kan du implementere mere intuitive og effektive løsninger på mange problemer inden for spil, grafik, fysik og meget mere.

# Tutorial 3: 3D Polære Koordinatsystemer - Cylindriske og Sfæriske Koordinater

## Introduktion
Når vi bevæger os fra 2D til 3D, udvides det polære koordinatsystem til to hovedtyper: cylindriske og sfæriske koordinater. Denne tutorial forklarer disse systemer, deres forskelle, og hvordan de anvendes i 3D-rummet.

## Cylindriske koordinater
Cylindriske koordinater er en direkte udvidelse af 2D polære koordinater ved at tilføje en højdekomponent.

### Definition af cylindriske koordinater (r, θ, z)
- **r**: Den radiale afstand fra z-aksen
- **θ**: Vinklen i det horisontale plan
- **z**: Højden langs z-aksen

### Sådan lokaliserer du et punkt med cylindriske koordinater:
1. Start ved nulpunktet
2. Bevæg dig som i 2D polære koordinater med (r, θ) i det horisontale plan
3. Bevæg dig derefter op eller ned langs z-aksen

### Konvertering mellem cylindriske og kartesiske koordinater:
**Fra cylindriske til kartesiske:**
- x = r cos(θ)
- y = r sin(θ)
- z = z

**Fra kartesiske til cylindriske:**
- r = √(x² + y²)
- θ = atan2(y, x)
- z = z

## Sfæriske koordinater
Sfæriske koordinater bruger to vinkler og en afstand til at beskrive position i 3D-rummet.

### Definition af sfæriske koordinater (r, θ, φ) i matematisk konvention:
- **r**: Afstanden fra nulpunktet
- **θ**: Den horisontale vinkel (azimut)
- **φ**: Den vertikale vinkel (zenith)

### Sådan lokaliserer du et punkt med sfæriske koordinater:
1. Start ved nulpunktet, pegende langs den horisontale polære akse
2. Rotér horisontalt med vinklen θ
3. Rotér nedad med vinklen φ
4. Bevæg dig afstanden r i den resulterende retning

### Alternative sfæriske konventioner for spil (r, h, p)
I spilprogrammering bruges ofte en alternativ konvention:
- **r**: Afstanden fra nulpunktet
- **h** (heading): Den horisontale vinkel, hvor 0 peger fremad (+z)
- **p** (pitch): Den vertikale vinkel, hvor 0 er vandret, positive værdier peger nedad

Denne konvention er mere intuitiv for kamerakontrol og navigation.

### Konvertering mellem sfæriske og kartesiske koordinater:
**Fra sfæriske til kartesiske (spilkonvention):**
- x = r cos(p) sin(h)
- y = -r sin(p)
- z = r cos(p) cos(h)

**Fra kartesiske til sfæriske (spilkonvention):**
- r = √(x² + y² + z²)
- h = atan2(x, z)
- p = arcsin(-y/r)

## Aliasering i 3D polære koordinater
Sfæriske koordinater har flere former for aliasering:

1. Addition af 360° til enhver vinkel
2. Ved r = 0 er alle vinkler irrelevante
3. Ved ekstreme værdier af pitch (±90°) opstår et fænomen kaldet "Gimbal lock"
4. Forskellige kombinationer af vinkler kan pege i samme retning

### Kanoniske sfæriske koordinater (spilkonvention):
- r ≥ 0
- -180° < h ≤ 180°
- -90° ≤ p ≤ 90°
- Ved r = 0 sættes h = p = 0
- Ved |p| = 90° sættes h = 0

## Praktisk eksempel: 3D visualisering
For at visualisere sfæriske koordinater, kan vi tænke på dem som punkter på en kugle med radius r:
- Konstant r definerer en kugle
- Konstant h definerer et vertikalt plan gennem nulpunktet
- Konstant p definerer en kegle med spids i nulpunktet

## Afslutning
3D polære koordinatsystemer er særligt nyttige til at beskrive positioner på kugler (som jordkloden), retningsvektorer, og kamerakontrol i 3D-miljøer. Ved at vælge den rette konvention og håndtere aliasering korrekt, kan du løse mange komplekse problemer på en mere intuitiv måde end med kartesiske koordinater.

# Tutorial 4: Avancerede Anvendelser og Håndtering af Særlige Tilfælde i Polære Koordinatsystemer

## Introduktion
Polære koordinatsystemer har både styrker og udfordringer. I denne tutorial udforsker vi avancerede anvendelser, hvordan vi håndterer særlige tilfælde som Gimbal lock, og hvordan polære koordinater kan bruges til at beskrive vektorer og ikke kun positioner.

## Vektorer i polær form
Vektorer kan beskrives lige så godt i polære koordinater som i kartesiske koordinater.

### Fordele ved polær vektorrepræsentation:
1. **Direkte adgang til længde**: r-komponenten er vektorens længde
2. **Direkte adgang til retning**: Vinklerne beskriver retningen
3. **Intuitiv forståelse**: "10 meter mod nordøst" er lettere at forstå end "(7.07, 7.07)"

### Eksempel på brug af polære vektorer i fysik:
```python
class Projektil:
    def __init__(self, position, hastighed, vinkel_grader):
        self.position = position  # Kartesiske koordinater (x, y)
        
        # Polær vektorrepræsentation af hastighed
        self.hastighedsmagnityde = hastighed  # meter/sekund
        self.retning_radianer = math.radians(vinkel_grader)
        
    def opdater(self, delta_tid):
        # Konverter polær til kartesisk for beregning
        hastighed_x = self.hastighedsmagnityde * math.cos(self.retning_radianer)
        hastighed_y = self.hastighedsmagnityde * math.sin(self.retning_radianer)
        
        # Opdater position
        self.position[0] += hastighed_x * delta_tid
        self.position[1] += hastighed_y * delta_tid
```

## Håndtering af Gimbal lock
Gimbal lock er et fænomen, der opstår i sfæriske koordinatsystemer, når pitch-vinklen nærmer sig ±90°.

### Problembeskrivelse:
- Når pitch er ±90° (direkte op eller ned), mister heading-vinklen sin betydning
- Forskellige kombinationer af heading og pitch kan beskrive samme retning
- Dette kan føre til uønskede spring i animation eller kamerakontrol

### Løsninger på Gimbal lock:
1. **Kanonisering af koordinater**: Sikrer konsistente værdier (se kode nedenfor)
2. **Quaternioner**: Brug af quaternioner i stedet for Euler-vinkler for rotationer
3. **Begrænset bevægelse**: Undgå at pitch nærmer sig ekstreme værdier

```python
def kanoniser_sfaeriske_koordinater(r, heading, pitch):
    """Konverterer sfæriske koordinater til kanonisk form."""
    
    # Hvis vi er ved nulpunktet
    if r == 0:
        return 0, 0, 0
    
    # Håndter negative afstande
    if r < 0:
        r = -r
        heading += math.pi  # 180 grader
        pitch = -pitch
    
    # Håndter pitch uden for intervallet [-90°, 90°]
    if abs(pitch) > math.pi/2:
        # Tilføj offset for at få pitch i det rette interval
        pitch += math.pi/2
        # Wrap pitch til [0, 2π]
        pitch %= 2 * math.pi
        
        if pitch > math.pi:
            # Juster heading og pitch
            heading += math.pi
            pitch = 3 * math.pi/2 - pitch
        else:
            # Juster pitch tilbage til [-90°, 90°]
            pitch -= math.pi/2
    
    # Gimbal lock? Brug tolerance for floating point
    if abs(pitch) >= 0.9999 * math.pi/2:
        heading = 0.0
    else:
        # Wrap heading til intervallet (-π, π]
        heading = ((heading + math.pi) % (2 * math.pi)) - math.pi
    
    return r, heading, pitch
```

## Interpolation i polære koordinatsystemer
Interpolation mellem to punkter eller retninger kan være udfordrende i polære koordinater.

### Problemer ved naiv interpolation:
- Direkte interpolation af vinkler kan føre til uventede baner
- Ved retninger nær ±180° kan interpolation tage den "lange vej rundt"

### Bedre interpolationsstrategier:
1. **Slerp (Spherical Linear Interpolation)** for blød overgang mellem retninger
2. **Konvertering til kartesiske koordinater**, interpolation og konvertering tilbage
3. **Særlig håndtering af vinkelnær ±180°** for at vælge korteste vej

```python
def interpoler_vinkler(vinkel1, vinkel2, faktor):
    """Interpolerer mellem to vinkler langs den korteste vej."""
    # Normalisér vinkler til [0, 2π]
    vinkel1 = vinkel1 % (2 * math.pi)
    vinkel2 = vinkel2 % (2 * math.pi)
    
    # Find den korteste vej
    diff = vinkel2 - vinkel1
    if diff > math.pi:
        diff -= 2 * math.pi
    elif diff < -math.pi:
        diff += 2 * math.pi
    
    # Interpolér
    return vinkel1 + diff * faktor
```

## Breddegrader og længdegrader: Et praktisk eksempel
Den mest kendte anvendelse af sfæriske koordinater er jordens koordinatsystem:

### Relation til sfæriske koordinater:
- **Radius**: Afstanden fra jordens centrum (normalt ikke brugt direkte)
- **Længdegrad**: Svarer til heading/azimut (θ)
- **Breddegrad**: Svarer til 90° - zenith (complimentær til φ)

### Beregning af afstand mellem to punkter på jorden (Haversine-formlen):
```python
def afstand_paa_jorden(bredde1, laengde1, bredde2, laengde2, radius=6371):
    """
    Beregner afstanden mellem to punkter på jorden.
    Alle vinkler er i radianer. Radius i km.
    """
    dlat = bredde2 - bredde1
    dlon = laengde2 - laengde1
    
    a = math.sin(dlat/2)**2 + math.cos(bredde1) * math.cos(bredde2) * math.sin(dlon/2)**2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
    
    return radius * c  # Afstand i kilometer
```

## Afslutning
Polære koordinatsystemer er kraftfulde værktøjer, der kræver særlig opmærksomhed på detaljer som aliasering, Gimbal lock og korrekt interpolation. Ved at mestre disse avancerede aspekter kan du udnytte det fulde potentiale af polære koordinater i alt fra geografiske beregninger til spilprogrammering og 3D-visualisering. De særlige egenskaber ved polære koordinater gør dem ideelle til at løse mange praktiske problemer på en mere intuitiv måde end med kartesiske koordinater.